{"ast":null,"code":"// import React, { useEffect } from \"react\";\n// import { Col, Row, notification, Spin } from \"antd\";\n// import \"./index.scss\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import withReducer from \"app/store/with_reducer\";\n// import reducer from \"./store/reducers\";\n// import { useHistory } from \"react-router-dom\";\n// import * as RegisterActions from \"./store/actions\";\n// // import AuthService from \"app/auth-keycloak/authservice\";\n// import constants from \"app/helpers/constants\";\n// import backgroundDark from \"../../../assets/icon/background-register.png\";\n// import { LoadingOutlined } from \"@ant-design/icons\";\n// import apiConfig from \"app/configs/api.config\";\n//\n// const AutoLoginPage = () => {\n//   const history = useHistory();\n//   // const location = useLocation();\n//   const dispatch = useDispatch();\n//   const primaryThemes = localStorage.getItem(\"primaryThemes\");\n//\n//   const antIcon = <LoadingOutlined style={{ fontSize: 58 }} spin />;\n//\n//   const { autoLogin } = useSelector((state) => state.registerData.register);\n//\n//   useEffect(() => {\n//     const url = window.location.href;\n//     const urlConvert = new URL(url);\n//     dispatch(\n//       RegisterActions.autoLogin({\n//         userName: urlConvert.searchParams.get(\"userName\"),\n//         password: urlConvert.searchParams.get(\"password\"),\n//       })\n//     );\n//   }, [dispatch]);\n//\n//   useEffect(() => {\n//     if (autoLogin.status !== null) {\n//       if (autoLogin.status.status === 200) {\n//         openNotificationWithIcon(\"success\");\n//         if (\n//           autoLogin.status.data.accessToken !== null &&\n//           autoLogin.status.data.refreshToken !== null\n//         ) {\n//           localStorage.setItem(\"primaryThemes\", 0);\n//           // AuthService.setTokens({\n//           //   accessToken: autoLogin.status.data.accessToken,\n//           //   refreshToken: autoLogin.status.data.refreshToken,\n//           // });\n//         }\n//         // history.push(\"/dashboards\");\n//         window.location = apiConfig.domainHome + \"/nowcast\";\n//       } else {\n//         openNotificationWithIcon(\"error\");\n//       }\n//     }\n//   }, [dispatch, autoLogin, history]);\n//\n//   const openNotificationWithIcon = (type) => {\n//     switch (type) {\n//       case \"success\":\n//         return notification[type]({\n//           message: \"Đăng nhập thành công\",\n//         });\n//       case \"error\":\n//         return notification[type]({\n//           message: \"Không thể đăng nhập\",\n//           description: \"Vui lòng kiểm tra lại thông tin của tài khoản.\",\n//         });\n//       default:\n//         return type;\n//     }\n//   };\n//\n//   return (\n//     <Row\n//       className=\"main-container-register\"\n//       style={{\n//         backgroundImage:\n//           primaryThemes !== constants.PRIMARY_THEMES\n//             ? \"\"\n//             : `url(${backgroundDark})`,\n//       }}\n//     >\n//       <Col\n//         span={24}\n//         className=\"form-register-page\"\n//         style={{\n//           background:\n//             primaryThemes !== constants.PRIMARY_THEMES\n//               ? \"#FFFFFF\"\n//               : \"rgba(0, 0, 0, 0.819)\",\n//         }}\n//       >\n//         <Spin\n//           tip=\"Loading...\"\n//           indicator={antIcon}\n//           style={{\n//             position: \"absolute\",\n//             top: \"30%\",\n//             left: \"45%\",\n//           }}\n//         />\n//       </Col>\n//     </Row>\n//   );\n// };\n// export default withReducer(\"registerData\", reducer)(AutoLoginPage);","map":{"version":3,"names":[],"sources":["D:/project-individual/reactjs/tool-hai-van-frontend/src/app/main/auth/auto_login.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import { Col, Row, notification, Spin } from \"antd\";\r\n// import \"./index.scss\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import withReducer from \"app/store/with_reducer\";\r\n// import reducer from \"./store/reducers\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import * as RegisterActions from \"./store/actions\";\r\n// // import AuthService from \"app/auth-keycloak/authservice\";\r\n// import constants from \"app/helpers/constants\";\r\n// import backgroundDark from \"../../../assets/icon/background-register.png\";\r\n// import { LoadingOutlined } from \"@ant-design/icons\";\r\n// import apiConfig from \"app/configs/api.config\";\r\n//\r\n// const AutoLoginPage = () => {\r\n//   const history = useHistory();\r\n//   // const location = useLocation();\r\n//   const dispatch = useDispatch();\r\n//   const primaryThemes = localStorage.getItem(\"primaryThemes\");\r\n//\r\n//   const antIcon = <LoadingOutlined style={{ fontSize: 58 }} spin />;\r\n//\r\n//   const { autoLogin } = useSelector((state) => state.registerData.register);\r\n//\r\n//   useEffect(() => {\r\n//     const url = window.location.href;\r\n//     const urlConvert = new URL(url);\r\n//     dispatch(\r\n//       RegisterActions.autoLogin({\r\n//         userName: urlConvert.searchParams.get(\"userName\"),\r\n//         password: urlConvert.searchParams.get(\"password\"),\r\n//       })\r\n//     );\r\n//   }, [dispatch]);\r\n//\r\n//   useEffect(() => {\r\n//     if (autoLogin.status !== null) {\r\n//       if (autoLogin.status.status === 200) {\r\n//         openNotificationWithIcon(\"success\");\r\n//         if (\r\n//           autoLogin.status.data.accessToken !== null &&\r\n//           autoLogin.status.data.refreshToken !== null\r\n//         ) {\r\n//           localStorage.setItem(\"primaryThemes\", 0);\r\n//           // AuthService.setTokens({\r\n//           //   accessToken: autoLogin.status.data.accessToken,\r\n//           //   refreshToken: autoLogin.status.data.refreshToken,\r\n//           // });\r\n//         }\r\n//         // history.push(\"/dashboards\");\r\n//         window.location = apiConfig.domainHome + \"/nowcast\";\r\n//       } else {\r\n//         openNotificationWithIcon(\"error\");\r\n//       }\r\n//     }\r\n//   }, [dispatch, autoLogin, history]);\r\n//\r\n//   const openNotificationWithIcon = (type) => {\r\n//     switch (type) {\r\n//       case \"success\":\r\n//         return notification[type]({\r\n//           message: \"Đăng nhập thành công\",\r\n//         });\r\n//       case \"error\":\r\n//         return notification[type]({\r\n//           message: \"Không thể đăng nhập\",\r\n//           description: \"Vui lòng kiểm tra lại thông tin của tài khoản.\",\r\n//         });\r\n//       default:\r\n//         return type;\r\n//     }\r\n//   };\r\n//\r\n//   return (\r\n//     <Row\r\n//       className=\"main-container-register\"\r\n//       style={{\r\n//         backgroundImage:\r\n//           primaryThemes !== constants.PRIMARY_THEMES\r\n//             ? \"\"\r\n//             : `url(${backgroundDark})`,\r\n//       }}\r\n//     >\r\n//       <Col\r\n//         span={24}\r\n//         className=\"form-register-page\"\r\n//         style={{\r\n//           background:\r\n//             primaryThemes !== constants.PRIMARY_THEMES\r\n//               ? \"#FFFFFF\"\r\n//               : \"rgba(0, 0, 0, 0.819)\",\r\n//         }}\r\n//       >\r\n//         <Spin\r\n//           tip=\"Loading...\"\r\n//           indicator={antIcon}\r\n//           style={{\r\n//             position: \"absolute\",\r\n//             top: \"30%\",\r\n//             left: \"45%\",\r\n//           }}\r\n//         />\r\n//       </Col>\r\n//     </Row>\r\n//   );\r\n// };\r\n// export default withReducer(\"registerData\", reducer)(AutoLoginPage);\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}